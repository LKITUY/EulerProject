'''Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.'''


def naive_fib(n):
    if n > 2:
        return naive_fib(n - 1) + naive_fib(n - 2)
    return n


def mem_fib(n, _cache={}):
    '''efficiently memoized recursive function, returns a Fibonacci number'''
    if n in _cache:
        return _cache[n]
    elif n > 1:
        return _cache.setdefault(n, mem_fib(n-1) + mem_fib(n-2))
    return n


cap = 10000
final_sum = 0

for num in range(cap):
    fib_num = mem_fib(num)
    if fib_num % 2 == 0 and fib_num < 4000000:
        final_sum += fib_num


print(final_sum) #4613732


